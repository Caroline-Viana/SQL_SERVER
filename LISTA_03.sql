USE AB_TREINAMENTO_CAROLINE
GO

/*
1) Desenvolva duas triggers (ao final desse exercício, REMOVA a trigger do banco de dados para não
ocasionar problemas nos próximos treinamentos):
De inserção na tabela CONTAS, que deverá gravar o USUARIOINCLUSAO com o seu nome, e DATAINCLUSAO
com a data corrente.
De alteração na tabela CONTAS que deverá gravar o USUARIOALTERACAO com o seu nome, e
DATAALTERACAO com a data corrente.
Insira uma nova conta e realize a consulta da conta cadastrada. Verifique a gravação apenas dos campos
USUARIOINCLUSAO e DATAINCLUSAO
Altere uma conta e realize a consulta da conta alterada. Verifique a gravação apenas dos campos
USUARIOALTERACAO e DATAALTERACAO
*/
CREATE TRIGGER TR_INSERIRCONTA ON CONTAS
FOR INSERT
AS BEGIN
	DECLARE @USUARIOINCLUSAO VARCHAR(100), 
	@DATAINCLUSAO DATE, 
	@CODCOLIGADA VARCHAR(3), 
	@CODAGENCIA VARCHAR(5), 
	@NROCONTA VARCHAR(7)

	SET @USUARIOINCLUSAO =  USER_NAME()
	SET @DATAINCLUSAO = GETDATE()

	SELECT @CODCOLIGADA = CODCOLIGADA, @CODAGENCIA = CODAGENCIA, @NROCONTA = NROCONTA FROM inserted

	UPDATE CONTAS
	SET CONTAS.USUARIOINCLUSAO = @USUARIOINCLUSAO, CONTAS.DATAINCLUSAO = @DATAINCLUSAO FROM CONTAS 
	WHERE CODCOLIGADA = @CODCOLIGADA AND CODAGENCIA = @CODAGENCIA AND NROCONTA = @NROCONTA
END
GO

CREATE TRIGGER TR_ALTERARCONTA ON CONTAS
FOR UPDATE
AS BEGIN
	DECLARE @USUARIOALTERACO VARCHAR(100), 
	@DATALATERACAO DATE, 
	@CODCOLIGADA VARCHAR(3), 
	@CODAGENCIA VARCHAR(5), 
	@NROCONTA VARCHAR(7)

	SET @USUARIOALTERACO = USER_NAME()
	SET @DATALATERACAO = GETDATE()

	SELECT @CODCOLIGADA = CODCOLIGADA, @CODAGENCIA = CODAGENCIA, @NROCONTA = NROCONTA FROM inserted

	UPDATE CONTAS
	SET CONTAS.USUARIOALTERACO = @USUARIOALTERACO, CONTAS.DATALATERACAO = @DATALATERACAO FROM CONTAS
	WHERE CODCOLIGADA = @CODCOLIGADA AND CODAGENCIA = @CODAGENCIA AND NROCONTA = @NROCONTA
END

INSERT INTO CONTAS(CODAGENCIA, CODCOLIGADA, CODPESSOA, INDPOUPANCA, NROCONTA)
VALUES ('10016', '103', '001', 'N', '1234122')

SELECT USUARIOINCLUSAO, DATAINCLUSAO FROM CONTAS WHERE NROCONTA = '1234111' AND CODCOLIGADA = '103' AND CODAGENCIA = '10016'

UPDATE CONTAS SET INDPOUPANCA = 'S' WHERE NROCONTA = '1234111'

SELECT USUARIOALTERACO, DATALATERACAO FROM CONTAS WHERE NROCONTA = '1234111'

DROP TRIGGER TR_INSERIRCONTA

DROP TRIGGER TR_ALTERARCONTA

/*
	Realize uma consulta que retorne a soma de todos os movimentos feitos a partir de um determinado período (01/01/2011 - 15/01/2011)
*/

SELECT SUM(VALOR) AS SOMAVALOR FROM MOVIMENTOS WHERE DATAMOVIMENTO BETWEEN '2023-11-10' AND '2023-11-17'

/*
	Insira um novo cliente e não cadastre conta nem movimento para ele.
*/

INSERT INTO PESSOAS(CODPESSOA, CPFCNPJ, NOME, DATANASCIMENTO, TIPODEPESSOA, NUMEROFILHOS, INDCLIENTEBANCO, TIPOLOGRADOURO, LOGRADOURO, BAIRRO, CIDADE, UF, PAIS, CEP) 
VALUES ('004', '00000000067', 'MONICA', '1996-06-13', 'J', 0, 'S', 'RUA', 'RIO BONITO', 'PIRITUBA', 'CAMPINAS', 'SP', 'BRASIL', '09008043')

/*
	Realize uma consulta que retorne os movimentos que foram realizados para o cliente com NOME iniciado por 'B';
*/

SELECT * FROM MOVIMENTOS JOIN CONTAS ON MOVIMENTOS.NROCONTA = CONTAS.NROCONTA JOIN PESSOAS ON CONTAS.CODPESSOA = PESSOAS.CODPESSOA
WHERE PESSOAS.NOME LIKE 'B%'

/*
	Realize uma consulta que retorne apenas os clientes que não possuem movimentos
*/

SELECT NOME FROM PESSOAS WHERE NOT EXISTS ( SELECT 1 FROM MOVIMENTOS 
	JOIN CONTAS ON MOVIMENTOS.NROCONTA = CONTAS.NROCONTA 
	WHERE CONTAS.CODPESSOA = PESSOAS.CODPESSOA)
GO

/*
	Crie uma procedure utilizando os recursos de transação (begin, rollback e commit).
*/

CREATE PROCEDURE P_MOVIMENTOTRANS
    @CODCOLIGADA VARCHAR(3), 
	@CODAGENCIA VARCHAR(5), 
	@NROCONTA VARCHAR(7), 
	@VALOR DECIMAL(17,2), 
	@MORA DECIMAL (17,2), 
	@MULTA DECIMAL (17,2), 
	@DESCONTO DECIMAL (17,2), 
	@DESCRICAO DECIMAL (17,2)
AS BEGIN
    BEGIN
        BEGIN TRANSACTION
        INSERT INTO MOVIMENTOS (CODCOLIGADA,CODAGENCIA,NROCONTA,VALOR,MORA,MULTA,DESCONTO,DESCRICAO, DATAMOVIMENTO)
        VALUES (@CODCOLIGADA, @CODAGENCIA, @NROCONTA, @VALOR, @MORA, @MULTA, @DESCONTO, @DESCRICAO, GETDATE());
        COMMIT
    END 
    BEGIN 
        ROLLBACK
    END 
END
GO

/*
	Crie uma view que retorne apenas o número das contas que tem movimentos com valores acima de 1000,00. Realize uma consulta a partir desta view.
*/

CREATE VIEW MOVIMENTOSACIMADE1000 
	AS SELECT CONTAS.NROCONTA FROM CONTAS JOIN MOVIMENTOS ON MOVIMENTOS.NROCONTA = CONTAS.NROCONTA 
	WHERE MOVIMENTOS.VALOR > 1000
GO

SELECT * FROM MOVIMENTOSACIMADE1000
GO

/*
	Crie uma procedure com um cursor que leia a tabela MOVIMENTOS. Percorra o cursor e exiba ‘Movimento Alto’ para movimentos com VALOR acima de 1.000 e ‘Movimento Baixo’ para movimentos abaixo de
1.000.
*/

CREATE PROCEDURE CLASSIFICACAOMOVIMENTOS 
AS BEGIN 
	DECLARE @NROCONTA VARCHAR(7), 
	@VALOR DECIMAL(17,2)
	DECLARE MOVIMENTOCURSOR CURSOR FOR SELECT NROCONTA, VALOR FROM MOVIMENTOS

	OPEN MOVIMENTOCURSOR 

	DECLARE @CLASSIFICACAO VARCHAR(60)

	FETCH NEXT FROM MOVIMENTOCURSOR INTO @NROCONTA, @VALOR

	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF  @VALOR > 1000
			SET @CLASSIFICACAO = 'MOVIMENTO ALTO'
		ELSE 
			SET @CLASSIFICACAO = 'MOVIMENTO BAIXO'
		
		PRINT 'CLASSIFICAÇÃO: ' + @CLASSIFICACAO

		FETCH NEXT FROM MOVIMENTOCURSOR INTO @NROCONTA, @VALOR

	END

	CLOSE MOVIMENTOCURSOR
	DEALLOCATE MOVIMENTOCURSOR
END
GO

DROP PROCEDURE CLASSIFICACAOMOVIMENTOS 
/*
	Crie uma trigger de UPDATE para a tabela MOVIMENTOS. Verifique se o campo DATAMOVIMENTO foi
alterado, e caso ele tenha sido alterado, emita uma mensagem de erro se a data for menor que a data
atual.
*/

GO
CREATE TRIGGER TR_DATAMOVIMENTO ON MOVIMENTOS
FOR UPDATE
AS BEGIN
	IF UPDATE(DATAMOVIMENTO)
	BEGIN
		IF EXISTS (SELECT 1 FROM inserted JOIN deleted ON inserted.NROCONTA = deleted.NROCONTA WHERE inserted.DATAMOVIMENTO < GETDATE())
		BEGIN
			RAISERROR('A data não pode ser menor que a atual', 16, 1)
		END
	END
END

DROP TRIGGER TR_DATAMOVIMENTO
GO

/*
Crie uma função que calcule o saldo anterior do movimento, que é a soma de todos os movimentos da
conta cuja data é menor que a data atual. Apresente os movimentos das contas com a data do
movimento, valor do movimento, saldo anterior e calcule o saldo atual que é o valor do movimento
mais o saldo anterior.
*/

CREATE FUNCTION SALDO (@NROCONTA VARCHAR(7), @DATAMOVIMENTO DATE)
RETURNS TABLE AS 
RETURN (
	WITH MOVIMENTOSANTERIORES AS (
	SELECT MOVIMENTOS.DATAMOVIMENTO, MOVIMENTOS.VALOR, SUM(SEGMOVIMENTO.VALOR) OVER (ORDER BY SEGMOVIMENTO.DATAMOVIMENTO) AS SALDOANTERIOR
	FROM MOVIMENTOS INNER JOIN CONTAS ON MOVIMENTOS.NROCONTA = CONTAS.NROCONTA LEFT JOIN MOVIMENTOS SEGMOVIMENTO ON SEGMOVIMENTO.NROCONTA = CONTAS.NROCONTA
	AND SEGMOVIMENTO.DATAMOVIMENTO < @DATAMOVIMENTO WHERE CONTAS.NROCONTA = @NROCONTA AND MOVIMENTOS.DATAMOVIMENTO = @DATAMOVIMENTO
	)

	SELECT MOVIMENTOSANTERIORES.SALDOANTERIOR, MOVIMENTOSANTERIORES.SALDOANTERIOR + MOVIMENTOSANTERIORES.VALOR AS SALDOATUAL FROM MOVIMENTOSANTERIORES
)
GO

/* ------------ Exercícios opcionais --------------- */


/*
Crie uma procedure que some 10,00 no campo DESCONTO e subtraia 10,00 do campo VALOR da tabela
MOVIMENTOS para todos os clientes que:
Tem conta poupança (INDPOUPANCA = S) e o dia e o mês do campo DATANASCIMENTO da tabela PESSOA
seja igual ao dia e o mês do campo DATAMOVIMENTO da tabela MOVIMENTO (daquela pessoa)
*/

CREATE PROCEDURE P_DESCONTO

AS BEGIN
	DECLARE @DIAMESATUAL VARCHAR(5)
	SET @DIAMESATUAL = FORMAT(GETDATE(), 'MM-dd')
	UPDATE MOVIMENTOS
	SET DESCONTO = DESCONTO + 10,
		VALOR = VALOR - 10
	FROM MOVIMENTOS INNER JOIN CONTAS ON MOVIMENTOS.NROCONTA = CONTAS.NROCONTA INNER JOIN PESSOAS ON PESSOAS.CODPESSOA = CONTAS.CODPESSOA
	WHERE CONTAS.INDPOUPANCA = 'S' AND FORMAT(PESSOAS.DATANASCIMENTO, 'MM-dd') = @DIAMESATUAL
END
GO

/*
Insira uma nova pessoa com data de nascimento 05/01/1990 e insira um movimento para esta pessoa no
dia 05/01/2010 com VALOR = 100,00
Insira um movimento para a mesma pessoa no dia 07/01/2010 com VALOR = 100,00
*/

INSERT INTO PESSOAS(CODPESSOA, CPFCNPJ, NOME, DATANASCIMENTO, TIPODEPESSOA, NUMEROFILHOS, INDCLIENTEBANCO, TIPOLOGRADOURO, LOGRADOURO, BAIRRO, CIDADE, UF, PAIS, CEP) 
VALUES ('005', '00000000069', 'Clara', '1990-01-05', 'J', 0, 'S', 'RUA', 'RIO BONITO', 'PIRITUBA', 'CAMPINAS', 'SP', 'BRASIL', '09008043')

INSERT INTO PESSOAS(CODPESSOA, CPFCNPJ, NOME, DATANASCIMENTO, TIPODEPESSOA, NUMEROFILHOS, INDCLIENTEBANCO, TIPOLOGRADOURO, LOGRADOURO, BAIRRO, CIDADE, UF, PAIS, CEP) 
VALUES ('006', '00000000068', 'Bianca', '1990-11-17', 'J', 0, 'S', 'RUA', 'RIO BONITO', 'PIRITUBA', 'CAMPINAS', 'SP', 'BRASIL', '09008043')

INSERT INTO CONTAS(CODAGENCIA, CODCOLIGADA, CODPESSOA, INDPOUPANCA, NROCONTA)
VALUES ('10016', '113', '006', 'S', '1234431')

INSERT INTO MOVIMENTOS(CODCOLIGADA, CODAGENCIA, NROCONTA, DATAMOVIMENTO, VALOR)
VALUES ('112', '10016', '1234432', '2010-01-05', 100),
('112', '10016', '1234432', '2010-01-07', 100)

INSERT INTO MOVIMENTOS(CODCOLIGADA, CODAGENCIA, NROCONTA, DATAMOVIMENTO, VALOR, DESCONTO)
VALUES ('113', '10016', '1234431', '2010-11-17', 100, 0)

/*
Execute a procedure e realize uma consulta na tabela MOVIMENTO para verificar se o DESCONTO de 10,00
foi dado para a pessoa e se foi abatido o valor de 10 reais do campo VALOR, na tabela MOVIMENTOS, de
acordo com as condições impostas pelo exercício. Apenas para um dos movimentos o desconto deve ter
sido concedido e o valor abatido.
*/

EXEC P_DESCONTO

SELECT NROCONTA, DATAMOVIMENTO, VALOR, DESCONTO FROM MOVIMENTOS

/*
Realize uma consulta que busque todas as contas (não repetir a conta) que possuem movimentos com desconto.
*/

SELECT DISTINCT NROCONTA, DESCONTO FROM MOVIMENTOS WHERE MOVIMENTOS.DESCONTO > 0

/*
Realize uma consulta que retorne apenas o ano de cada registro da tabela movimentos.
*/

SELECT NROCONTA, FORMAT(DATAMOVIMENTO, 'yyyy') FROM MOVIMENTOS

/*
Realize uma consulta na tabela Contas que retorne Sim caso o valor do campo INDPOUPANCA seja igual a
'S', ou Não caso o valor do campo INDPOUPANCA seja igual a 'N', desde que o cliente que possua esta conta
seja cliente do banco (INDCLIENTEBANCO = S).
*/

SELECT PESSOAS.NOME, 
	CASE
		WHEN INDPOUPANCA = 'S' THEN 'Sim'
		WHEN INDPOUPANCA = 'N' THEN 'Não'
		ELSE 'DESCONHECIDO'
	END AS INDPOUPANCA 
FROM CONTAS JOIN PESSOAS ON CONTAS.CODPESSOA = PESSOAS.CODPESSOA WHERE INDCLIENTEBANCO = 'S'

/*
Elabore um consulta qualquer utilizando LEFT JOIN, RIGHT JOIN e JOIN e descreva o propósito dessa consulta.
*/

SELECT PESSOAS.NOME, CONTAS.CODAGENCIA, CONTAS.NROCONTA, MOVIMENTOS.VALOR, CONTAS.INDPOUPANCA FROM PESSOAS 
	LEFT JOIN CONTAS ON PESSOAS.CODPESSOA = CONTAS.CODPESSOA RIGHT JOIN MOVIMENTOS ON CONTAS.NROCONTA = MOVIMENTOS.NROCONTA

/*
Elabore uma consulta que retorne os campos valor, mora e multa da tabela movimentos, garantindo que,
se o valor a ser exibido for null, retorne zero.
*/

INSERT INTO MOVIMENTOS(CODCOLIGADA, CODAGENCIA, NROCONTA, DATAMOVIMENTO, DESCONTO)
VALUES ('113', '10016', '1234431', '2010-11-17', 0)

SELECT MORA, MULTA, ISNULL(VALOR, '0') AS VALOR FROM MOVIMENTOS



