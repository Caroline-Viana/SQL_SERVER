/*
	Crie uma base de dados com o nome: AB_TREINAMENTO_NOME
*/

CREATE DATABASE AB_TREINAMENTO_CAROLINE
GO

DROP DATABASE AB_TREINAMENTO_CAROLINE

USE AB_TREINAMENTO_CAROLINE

CREATE TABLE PESSOAS(
	CODPESSOA VARCHAR(3),
	CPFCNPJ VARCHAR(14) NOT NULL,
	NOME VARCHAR(100) NOT NULL,
	DATANASCIMENTO DATE NOT NULL,
	TIPODEPESSOA CHAR(1) NOT NULL CONSTRAINT VALIDA_TIPODEPESSOA CHECK (TIPODEPESSOA IN ('P','J')),
	NUMEROFILHOS INT NOT NULL DEFAULT 0,
	INDCLIENTEBANCO CHAR(1) NOT NULL CONSTRAINT VALIDA_INDCLIENTEBANCO CHECK (INDCLIENTEBANCO IN ('S', 'N')),
	TIPOLOGRADOURO VARCHAR(3),
	LOGRADOURO VARCHAR(100),
	BAIRRO VARCHAR(50),
	CIDADE VARCHAR(50),
	UF VARCHAR(2),
	PAIS VARCHAR(50),
	CEP VARCHAR(8),
	CONSTRAINT PK_PESSOAS PRIMARY KEY(CODPESSOA)
)

CREATE TABLE CONTAS(
	CODCOLIGADA VARCHAR(3),
	CODAGENCIA VARCHAR(5),
	NROCONTA VARCHAR(7),
	CODPESSOA VARCHAR(3) NOT NULL,
	CONSTRAINT FK_CONTAS_PESSOAS FOREIGN KEY (CODPESSOA) REFERENCES PESSOAS (CODPESSOA),
	INDPOUPANCA CHAR(1) NOT NULL CONSTRAINT VALIDA_INDPOUPANCA CHECK (INDPOUPANCA IN ('S', 'N')),
	USUARIOINCLUSAO VARCHAR(100),
	DATAINCLUSAO DATETIME,
	USUARIOALTERACO VARCHAR(100),
	DATALATERACAO DATE NULL,
	CONSTRAINT PK_CONTAS PRIMARY KEY(CODCOLIGADA, CODAGENCIA, NROCONTA)
)

CREATE TABLE MOVIMENTOS(
	CODCOLIGADA VARCHAR(3),
	CODAGENCIA VARCHAR(5),
	NROCONTA VARCHAR(7),
	NROMOVIMENTO INT IDENTITY(1,1),
	DATAMOVIMENTO DATETIME NOT NULL,
	VALOR DECIMAL(17,2),
	MORA DECIMAL (17,2),
	MULTA DECIMAL (17,2),
	DESCONTO DECIMAL (17,2),
	DESCRICAO DECIMAL (17,2),
	CONSTRAINT PK_MOVIMENTOS PRIMARY KEY(NROMOVIMENTO, CODCOLIGADA, CODAGENCIA, NROCONTA),
	CONSTRAINT FK_MOVIMENTOS_CONTAS FOREIGN KEY (CODCOLIGADA, CODAGENCIA, NROCONTA) REFERENCES CONTAS (CODCOLIGADA, CODAGENCIA, NROCONTA)
)

ALTER TABLE MOVIMENTOS ALTER COLUMN DATAMOVIMENTO DATE
ALTER TABLE CONTAS ALTER COLUMN DATAINCLUSAO DATE

/*
	Realize 2 inserções na tabela PESSOAS, sendo que:
	O nome da pessoa deve iniciar pelo nome do treinando
	Para uma pessoa, inserir o TIPOPESSOA 'F' e a outra 'J';
	Para uma pessoa, inserir o INDCLIENTEBANCO 'S' e a outra 'N';
*/

INSERT INTO PESSOAS(CODPESSOA, CPFCNPJ, NOME, DATANASCIMENTO, TIPODEPESSOA, NUMEROFILHOS, INDCLIENTEBANCO, TIPOLOGRADOURO, LOGRADOURO, BAIRRO, CIDADE, UF, PAIS, CEP) 
VALUES ('001', '00000000009', 'Caroline', '2001-02-26', 'J', 0, 'S', 'RUA', 'RIO PEQUENO', 'LUZ', 'SAO PAULO', 'SP', 'BRASIL', '09008007'),
('002', '00000000008', 'Carol', '2001-02-26', 'P', 0, 'N', 'RUA', 'RIO GRANDE', 'LUZ', 'SAO PAULO', 'SP', 'BRASIL', '09008008');

/*
	Realize uma nova inserção na tabela pessoas
*/

INSERT INTO PESSOAS(CODPESSOA, CPFCNPJ, NOME, DATANASCIMENTO, TIPODEPESSOA, NUMEROFILHOS, INDCLIENTEBANCO, TIPOLOGRADOURO, LOGRADOURO, BAIRRO, CIDADE, UF, PAIS, CEP) 
VALUES ('003', '00000000008', 'Jhonatan', '2001-02-05', 'P', 0, 'N', 'RUA', 'RIO GRANDE', 'LUZ', 'SAO PAULO', 'SP', 'BRASIL', '09008008');

/*
	Altere o TIPOPESSOA, LOGRADOURO E DATANASCIMENTO da pessoa inserida no tópico 3
*/

UPDATE PESSOAS SET TIPODEPESSOA = 'J', LOGRADOURO = 'RIO LARGO', DATANASCIMENTO = '2004-02-05' WHERE CODPESSOA = '003'

/*
	Exclua a pessoa inserida no tópico 3
*/

DELETE PESSOAS WHERE CODPESSOA = '003'

/*
	Realize 2 inserções na tabela CONTAS, sendo que a conta seja para pessoas diferentes
*/

INSERT INTO CONTAS(CODAGENCIA, CODCOLIGADA, CODPESSOA, INDPOUPANCA, NROCONTA, USUARIOALTERACO, USUARIOINCLUSAO)
VALUES ('10016', '100', '001', 'S', '1234567', 'NÃO', 'INCLUIDO COM SUCESSO'),
('10016', '101', '002', 'S', '1234578', 'NÃO', 'INCLUIDO COM SUCESSO');

/*
	Realize uma consulta que retorne quantas pessoas estão cadastradas
*/

SELECT COUNT(*) AS QUANTIDADEPESSOAS FROM PESSOAS

/*
	Realize um select na tabela clientes que exiba o nome do cliente e:
	Se TIPOPESSOA = 'J', exiba Jurídica
	Se TIPOPESSOA = 'F', exiba Física
*/

SELECT NOME, 
	CASE
		WHEN TIPODEPESSOA = 'J' THEN 'JURÍDICA'
		WHEN TIPODEPESSOA = 'P' THEN 'FÍSICA'
		ELSE 'DESCONHECIDO'
	END AS TIPOPESSOA
FROM PESSOAS

/* 
	Realize uma consulta que retorne a pessoa que possui a menor DATANASCIMENTO
*/

SELECT NOME, DATANASCIMENTO FROM PESSOAS WHERE DATANASCIMENTO = (SELECT MIN(DATANASCIMENTO) FROM PESSOAS)

/*
	Realize uma consulta que retorne as pessoas ordenadas por UF e CIDADE, desde que a UF e a CIDADE sejam
	diferentes de nulo ou vazio
*/

SELECT NOME, UF, CIDADE FROM PESSOAS 
WHERE CIDADE IS NOT NULL AND CIDADE <> '' AND UF IS NOT NULL AND UF <> ''
ORDER BY UF, CIDADE

/*
	Realize uma consulta que retorne apenas o nome e o número da conta dos clientes
*/

SELECT PESSOAS.NOME, CONTAS.NROCONTA FROM PESSOAS JOIN CONTAS ON PESSOAS.CODPESSOA = CONTAS.CODPESSOA

/*
	Realize uma consulta que traga apenas as contas dos clientes que tem mais de uma conta
*/

SELECT CODPESSOA, COUNT(*) AS QUANTIDADECONTAS FROM CONTAS GROUP BY CODPESSOA HAVING COUNT(*) > 1

/*
	Realize uma consulta que traga apenas as contas dos clientes que o TIPOPESSOA seja 'F'
*/

SELECT PESSOAS.NOME, PESSOAS.TIPODEPESSOA, CONTAS.NROCONTA FROM PESSOAS JOIN CONTAS ON PESSOAS.CODPESSOA = CONTAS.CODPESSOA 
WHERE TIPODEPESSOA = 'P'